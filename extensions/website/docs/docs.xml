<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<javascript>
    <class type="ActiveEvent" superclass="Object">
        <methods>
            <method name="extend" scope="static">
                <description>After extending a given object, it will inherit the methods described in ActiveEvent.ObservableObject.</description>
                <parameters>
                    <parameter name="object" usage="required" type="Object"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="ActiveEvent.ObservableObject" superclass="Object">
        <description>After calling ActiveEvent.extend(object), the given object will inherit the methods in this namespace. If the given object has a prototype (is a class constructor), the object&apos;s prototype will inherit these methods as well.</description>
        <methods>
            <method name="makeObservable" scope="static">
                <description>Wraps the given method_name with a function that will call the method, then trigger an event with the same name as the method. This can safely be applied to virtually any method, including built in Objects (Array.pop, etc), but cannot be undone.</description>
                <parameters>
                    <parameter name="method_name" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="notify" scope="static">
                <description>Triggers event_name with the passed arguments.</description>
                <parameters>
                    <parameter name="event_name" usage="required" type="String"/>
                    <parameter name="args" usage="optional" type="mixed"/>
                </parameters>
                <return-types>
                    <return-type type="mixed">
                        <description>Array of return values, or false if the event was stopped by an observer.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="observe" scope="static">
                <parameters>
                    <parameter name="event_name" usage="required" type="String"/>
                    <parameter name="observer" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Function">
                        <description>observer</description>
                    </return-type>
                </return-types>
            </method>
            <method name="observeMethod" scope="static">
                <description>Similiar to makeObservable(), but after the callback is called, the method will be returned to it&apos;s original state and will no longer be observable.</description>
                <parameters>
                    <parameter name="method_name" usage="required" type="String"/>
                    <parameter name="observe" usage="required" type="Function"/>
                    <parameter name="callback" usage="optional" type="Function"/>
                </parameters>
            </method>
            <method name="observeOnce" scope="static">
                <description>Works exactly like observe(), but will stopObserving() after the next time the event is fired.</description>
                <parameters>
                    <parameter name="event_name" usage="required" type="String"/>
                    <parameter name="observer" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Function">
                        <description>The observer that was passed in will be wrapped, this generated / wrapped observer is returned.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="stopObserving" scope="static">
                <description>Removes a given observer. If no observer is passed, removes all observers of that event. If no event is passed, removes all observers of the object.</description>
                <parameters>
                    <parameter name="event_name" usage="optional" type="String"/>
                    <parameter name="observer" usage="optional" type="Function"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord" superclass="Object">
        <properties>
            <property name="adapter" access="read-write" scope="static" type="mixed">
                <description>null if no connection is active, or the class that created the connection.</description>
            </property>
            <property name="autoMigrate" access="read-write" scope="static" type="Boolean">
                <description>Will automatically create a table when create() is called. Defaults to true.</description>
            </property>
            <property name="ClassMethods" access="read-write" scope="static" type="Object">
                <description>Contains all methods that will become available to ActiveRecord classes.</description>
            </property>
            <property name="connection" access="read-write" scope="static" type="mixed">
                <description>null if no connection is active, or the connection object.</description>
            </property>
            <property name="InstanceMethods" access="read-write" scope="static" type="Object">
                <description>Contains all methods that will become available to ActiveRecord instances.</description>
            </property>
            <property name="internalCounter" access="read-write" scope="static" type="Number">
                <description>Tracks the number of records created.</description>
            </property>
            <property name="logging" access="read-write" scope="static" type="Boolean">
                <description>Defaults to false.</description>
            </property>
            <property name="Models" access="read-write" scope="static" type="Object">
                <description>Contains model_name, ActiveRecord.Class pairs.</description>
            </property>
        </properties>
        <methods>
            <method name="connect" scope="static">
                <description>Must be called before using ActiveRecord. If the adapter requires arguments, those must be passed in after the type of adapter.</description>
                <examples>
                    <example>
                        ActiveRecord.connect(ActiveRecord.Adapters.JaxerSQLite,&apos;path_to_database_file&apos;); ActiveRecord.adapter === ActiveRecord.Adapters.JaxerSQLite; ActiveRecord.connection.executeSQL(&apos;SELECT * FROM sqlite_master&apos;); //or you can have ActiveRecord try to auto detect the enviornment ActiveRecord.connect();
                    </example>
                </examples>
                <parameters>
                    <parameter name="adapter" usage="required" type="Object"/>
                    <parameter name="args" usage="optional" type="mixed"/>
                </parameters>
            </method>
            <method name="create" scope="static">
                <description>Creates an ActiveRecord class, returning the class and storing it inside ActiveRecord.Models [ model_name ] . model_name is a singularized, capitalized form of table name.</description>
                <examples>
                    <example>
                        var User = ActiveRecord.create(&apos;users&apos;); var u = User.find(5);
                    </example>
                </examples>
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="fields" usage="required" type="Object">
                        <description>Should consist of column name, default value pairs. If an empty array or empty object is set as the default, any arbitrary data can be set and will automatically be serialized when saved. To specify a specific type, set the value to an object that contains a &quot;type&quot; key, with optional &quot;length&quot; and &quot;value&quot; keys.</description>
                    </parameter>
                    <parameter name="methods" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="define" scope="static">
                <description>If the table for your ActiveRecord does not exist, this will define the ActiveRecord and automatically create the table.</description>
                <examples>
                    <example>
                        var User = ActiveRecord.define(&apos;users&apos;, { name: &apos;&apos;, password: &apos;&apos;, comment_count: 0, profile: { type: &apos;text&apos;, value: &apos;&apos; }, serializable_field: { } }); var u = User.create( { name: &apos;alice&apos;, serializable_field: { a : &apos;1&apos;, b: &apos;2&apos;} });
                    </example>
                </examples>
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="fields" usage="required" type="Object">
                        <description>Should consist of column name, default value pairs. If an empty array or empty object is set as the default, any arbitrary data can be set and will automatically be serialized when saved. To specify a specific type, set the value to an object that contains a &quot;type&quot; key, with optional &quot;length&quot; and &quot;value&quot; keys.</description>
                    </parameter>
                    <parameter name="methods" usage="optional" type="Object"/>
                    <parameter name="readyCallback" usage="optional" type="Function">
                        <description>Must be specified if running in asynchronous mode.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="escape" scope="static">
                <description>Escapes a given argument for use in a SQL string. By default the argument passed will also be enclosed in quotes.</description>
                <parameters>
                    <parameter name="argument" usage="required" type="mixed"/>
                    <parameter name="supress_quotes" usage="optional" type="Boolean">
                        <description>Defaults to false.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="mixed">
                        <description>ActiveRecord.escape(5) == 5 ActiveRecord.escape(&apos;tes&quot;t&apos;) == &apos;&quot;tes\&quot;t&quot;&apos;;</description>
                    </return-type>
                </return-types>
            </method>
            <method name="execute" scope="static">
                <description>Execute a SQL statement on the active connection. If the statement requires arguments they must be passed in after the SQL statement.</description>
                <examples>
                    <example>
                        ActiveRecord.execute(&apos;DELETE FROM users WHERE user_id = ?&apos;,5);
                    </example>
                </examples>
                <parameters>
                    <parameter name="sql" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="mixed"/>
                </return-types>
            </method>
            <method name="observe" scope="static">
                <description>Observe an event on all models. observer will be called with model_class, model_instance.</description>
                <parameters>
                    <parameter name="event_name" usage="required" type="String"/>
                    <parameter name="observer" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Array">
                        <description>Array of observers</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord.Adapters" superclass="Object">
        <properties>
            <property name="Auto" access="read-write" scope="static" type="ActiveRecord.Adapter">
                <description>Default adapter, will try to automatically pick the appropriate adapter for the current environment.</description>
            </property>
            <property name="Gears" access="read-write" scope="static" type="ActiveRecord.Adapter">
                <description>Adapter for browsers supporting a SQL implementation (Gears, HTML5).</description>
            </property>
            <property name="InMemory" access="read-write" scope="static" type="ActiveRecord.Adapter">
                <description>In memory, non persistent storage.</description>
            </property>
        </properties>
    </class>
    <class type="ActiveRecord.Class" superclass="Object">
        <description>Each generated class will inherit all of the methods in this class, in addition to the ones dynamically generated by finders, validators, relationships, or your own definitions.</description>
        <methods>
            <method name="addValidator" scope="static">
                <description>Adds the validator to the _validators array of a given ActiveRecord.Class.</description>
                <parameters>
                    <parameter name="validator" usage="required" type="Function"/>
                </parameters>
            </method>
            <method name="average" scope="static">
                <description>options can contain all params that find() can</description>
                <parameters>
                    <parameter name="column_name" usage="required" type="String"/>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="belongsTo" scope="static">
                <description>Sepcifies a 1&lt;-1 relationship between models. The foreign key will reside in the declaring object.</description>
                <examples>
                    <example>
                        Comment.belongsTo(&apos;User&apos;, { counter: &apos;comment_count&apos; //comment count must be a column in User }); var c = Comment.find(5); //each Comment instance will gain the following 3 methods c.getUser() c.buildUser() c.createUser()
                    </example>
                </examples>
                <parameters>
                    <parameter name="related_model_name" usage="required" type="String">
                        <description>Can be a plural or singular referring to the related table, the model name, or a reference to the model itself (&quot;users&quot;,&quot;User&quot; or User would all work).</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>Can contain { String } &quot;foreignKey&quot;, { String } name, { String } &quot;counter&quot; keys.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="build" scope="static">
                <description>Identical to calling create(), but does not save the record.</description>
                <parameters>
                    <parameter name="data" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="ActiveRecord.Instance"/>
                </return-types>
            </method>
            <method name="count" scope="static">
                <description>options can contain all params that find() can</description>
                <parameters>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="create" scope="static">
                <examples>
                    <example>
                        var u = User.create( { name: &apos;alice&apos;, password: &apos;pass&apos; }); u.id //will now contain the id of the user
                    </example>
                </examples>
                <parameters>
                    <parameter name="data" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="ActiveRecord.Instance"/>
                </return-types>
            </method>
            <method name="destroy" scope="static">
                <description>Deletes a given id (if it exists) calling any callbacks or validations on the record. If &quot;all&quot; is passed as the ids, all records will be found and destroyed.</description>
                <parameters>
                    <parameter name="id" usage="required" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="find" scope="static">
                <description>Find a given record, or multiple records matching the passed conditions.</description>
                <examples>
                    <example>
                        var user = User.find(5); //finds a single record var user = User.find( { first: true, where: { id: 5 } }); var user = User.find( { first: true, where: [ &apos;id = ?&apos;,5 ] }); var users = User.find(); //finds all var users = User.find( { where: &apos;name = &quot;alice&quot; AND password = &quot;&apos; + md5(&apos;pass&apos;) + &apos;&quot;&apos;, order: &apos;id DESC&apos; }); //using the where syntax below, the parameters will be properly escaped var users = User.find( { where: { name: &apos;alice&apos;, password: md5(&apos;pass&apos;) } order: &apos;id DESC&apos; }); var users = User.find(&apos;SELECT * FROM users ORDER id DESC&apos;);
                    </example>
                </examples>
                <parameters>
                    <parameter name="params" usage="required" type="mixed">
                        <description>Can be an integer to try and find a record by id, a complete SQL statement String, or Object of params, params may contain: select: Array of columns to select (default [ &apos;*&apos; ] ) where: String or Object or Array joins: String order: String limit: Number offset: Number synchronize: Boolean</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="mixed">
                        <description>If finding a single record, response will be Boolean false or ActiveRecord.Instance. Otherwise an Array of ActiveRecord.Instance s will be returned (which may be empty).</description>
                    </return-type>
                </return-types>
            </method>
            <method name="first" scope="static">
                <description>Returns the first record sorted by id.</description>
                <return-types>
                    <return-type type="ActiveRecord.Instance"/>
                </return-types>
            </method>
            <method name="hasMany" scope="static">
                <description>Sepcifies a 1-&gt;N relationship between models. The foreign key will reside in the child (related) object.</description>
                <examples>
                    <example>
                        User.hasMany(&apos;comments&apos;, { dependent: true }); var u = User.find(5); //each User instance will gain the following 5 methods u.createComment() u.buildComment() u.destroyComment() u.getCommentList() //takes the same options as find() u.getCommentCount() //takes the same options as count()
                    </example>
                </examples>
                <parameters>
                    <parameter name="related_model_name" usage="required" type="String">
                        <description>Can be a plural or singular referring to the related table, the model name, or a reference to the model itself (&quot;users&quot;,&quot;User&quot; or User would all work).</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>Can contain { String } &quot;foreignKey&quot;, { Sting } &quot;name&quot;, { Boolean } &quot;dependent&quot;, { String } &quot;order&quot; and { String } &quot;where&quot; keys.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="hasOne" scope="static">
                <description>Sepcifies a 1-&gt;1 relationship between models. The foreign key will reside in the related object.</description>
                <examples>
                    <example>
                        User.hasOne(CreditCard); var u = User.find(5); //each User instance will gain the following 3 methods u.getCreditCard() u.buildCreditCard() u.createCreditCard()
                    </example>
                </examples>
                <parameters>
                    <parameter name="related_model_name" usage="required" type="String">
                        <description>Can be a plural or singular referring to the related table, the model name, or a reference to the model itself (&quot;users&quot;,&quot;User&quot; or User would all work).</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object">
                        <description>Can contain { String } &quot;foreignKey&quot;, { String } &quot;name&quot;, { Boolean } &quot;dependent&quot; keys.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="last" scope="static">
                <description>Returns the last record sorted by id.</description>
                <return-types>
                    <return-type type="ActiveRecord.Instance"/>
                </return-types>
            </method>
            <method name="max" scope="static">
                <description>options can contain all params that find() can</description>
                <parameters>
                    <parameter name="column_name" usage="required" type="String"/>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="min" scope="static">
                <description>options can contain all params that find() can</description>
                <parameters>
                    <parameter name="column_name" usage="required" type="String"/>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="resultSetFromArray" scope="static">
                <description>Extends a vanilla array with ActiveRecord.ResultSet methods allowing for the construction of custom result set objects from arrays where result sets are expected. This will modify the array that is passed in and return the same array object.</description>
                <examples>
                    <example>
                        var one = Comment.find(1); var two = Comment.find(2); var result_set = Comment.resultSetFromArray( [ one,two ] );
                    </example>
                </examples>
                <parameters>
                    <parameter name="result_set" usage="required" type="Array"/>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="sum" scope="static">
                <description>options can contain all params that find() can</description>
                <parameters>
                    <parameter name="column_name" usage="required" type="String"/>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="transaction" scope="static">
                <examples>
                    <example>
                        Account.transaction(function() { var from = Account.find(2); var to = Account.find(3); to.despoit(from.withdraw(100.00)); });
                    </example>
                </examples>
                <parameters>
                    <parameter name="proceed" usage="required" type="Function">
                        <description>The block of code to execute inside the transaction.</description>
                    </parameter>
                    <parameter name="error" usage="optional" type="Function">
                        <description>Optional error handler that will be called with an exception if one is thrown during a transaction. If no error handler is passed the exception will be thrown.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="update" scope="static">
                <examples>
                    <example>
                        Article.update(3, { title: &apos;New Title&apos; }); //or pass an array of ids and an array of attributes Article.update( [ 5,7 ] , [ { title : &apos;Title for 5&apos;}, { title : &apos;Title for 7&apos;} ] );
                    </example>
                </examples>
                <parameters>
                    <parameter name="id" usage="required" type="Number"/>
                    <parameter name="attributes" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="ActiveRecord.Instance"/>
                </return-types>
            </method>
            <method name="updateAll" scope="static">
                <parameters>
                    <parameter name="updates" usage="required" type="Object">
                        <description>A string of updates to make, or a Hash of column value pairs.</description>
                    </parameter>
                    <parameter name="conditions" usage="optional" type="String">
                        <description>Optional where condition, or Hash of column name, value pairs.</description>
                    </parameter>
                </parameters>
            </method>
            <method name="validatesLengthOf" scope="static">
                <description>Accepts &quot;min&quot; and &quot;max&quot; numbers as options.</description>
                <parameters>
                    <parameter name="field" usage="required" type="String"/>
                    <parameter name="options" usage="optional" type="Object"/>
                </parameters>
            </method>
            <method name="validatesPresenceOf" scope="static">
                <parameters>
                    <parameter name="field" usage="required" type="String"/>
                    <parameter name="options" usage="optional" type="Object"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord.Errors" superclass="Object">
        <properties>
            <property name="ConnectionNotEstablished" access="read-write" scope="static" type="String"/>
            <property name="InvalidFieldType" access="read-write" scope="static" type="String"/>
            <property name="MethodDoesNotExist" access="read-write" scope="static" type="String"/>
        </properties>
    </class>
    <class type="ActiveRecord.Instance" superclass="Object">
        <description>Each found instance will inherit all of the methods in this class, in addition to the ones dynamically generated by finders, validators, relationships, or your own definitions.</description>
        <methods>
            <method name="addError" scope="static">
                <parameters>
                    <parameter name="message" usage="required" type="String"/>
                    <parameter name="field_name" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="destroy" scope="static">
                <description>Removes the object from the database, but does not destroy the object in memory itself.</description>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="get" scope="static">
                <description>Get a given key on the object. If your field name is a reserved word, or the name of a method (save, updateAttribute, etc) you must use the get() method to access the property. For convenience non reserved words (title, user_id, etc) can be accessed directly (instance.key_name)</description>
                <parameters>
                    <parameter name="key" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="mixed"/>
                </return-types>
            </method>
            <method name="getErrors" scope="static">
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="keys" scope="static">
                <description>Returns an array of the column names that the instance contains.</description>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="reload" scope="static">
                <description>Loads the most current data for the object from the database.</description>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="save" scope="static">
                <description>Persists the object, creating or updating as nessecary.</description>
                <parameters>
                    <parameter name="force_created_mode" usage="required" type="Boolean">
                        <description>Defaults to false, will force the record to act as if it was created even if an id property was passed.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="set" scope="static">
                <description>Sets a given key on the object. You must use this method to set a property, properties assigned directly (instance.key_name = value) will not persist to the database and may cause errors.</description>
                <parameters>
                    <parameter name="key" usage="required" type="String"/>
                    <parameter name="value" usage="required" type="mixed"/>
                    <parameter name="surpress_notifications" usage="required" type="Boolean">
                        <description>Defaults to false</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="mixed">
                        <description>the value that was set</description>
                    </return-type>
                </return-types>
            </method>
            <method name="stop" scope="static">
                <description>Stops the synchronization of the record with the database.</description>
                <return-types>
                    <return-type type="null"/>
                </return-types>
            </method>
            <method name="synchronize" scope="static">
                <description>Once synchronized a found instance will have it&apos;s values updated if other records with the same id change in the database.</description>
                <return-types>
                    <return-type type="null"/>
                </return-types>
            </method>
            <method name="toJSON" scope="static">
                <description>Serializes the record to an JSON string. If object_to_inject is passed that object will override any values of the record.</description>
                <parameters>
                    <parameter name="object_to_inject" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="toObject" scope="static">
                <description>Returns a &quot;clean&quot; version of the object, with just the data and no methods.</description>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="toSerializableObject" scope="static">
                <description>toJSON and toXML will call this instead of toObject() to get the data they will serialize. By default this calls toObject(), but you can override this method to easily create custom JSON and XML output.</description>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="toXML" scope="static">
                <description>Serializes the record to an XML string. If object_to_inject is passed that object will override any values of the record.</description>
                <parameters>
                    <parameter name="object_to_inject" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="updateAttribute" scope="static">
                <description>Sets a given key on the object and immediately persists that change to the database triggering any callbacks or validation .</description>
                <parameters>
                    <parameter name="key" usage="required" type="String"/>
                    <parameter name="value" usage="required" type="mixed"/>
                </parameters>
            </method>
            <method name="updateAttributes" scope="static">
                <description>Updates all of the passed attributes on the record and then calls save().</description>
                <parameters>
                    <parameter name="attributes" usage="required" type="Object"/>
                </parameters>
            </method>
            <method name="values" scope="static">
                <description>Returns an array of the column values that the instance contains.</description>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord.Migrations" superclass="Object">
        <methods>
            <method name="current" scope="static">
                <description>Returns the current schema version number.</description>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="max" scope="static">
                <description>Returns the highest key name in the ActiveRecord.Migrations hash.</description>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="migrate" scope="static">
                <description>Migrates a database schema to the given version.</description>
                <parameters>
                    <parameter name="target" usage="required" type="Number"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord.Migrations.Schema" superclass="Object">
        <description>This object is passed to all migrations as the only parameter.</description>
        <methods>
            <method name="addColumn" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="column_name" usage="required" type="String"/>
                    <parameter name="data_type" usage="optional" type="mixed"/>
                </parameters>
            </method>
            <method name="addIndex" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="column_names" usage="required" type="Array"/>
                    <parameter name="options" usage="required" type="Object"/>
                </parameters>
            </method>
            <method name="createTable" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="columns" usage="required" type="Object"/>
                </parameters>
            </method>
            <method name="dropColumn" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="column_name" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="dropTable" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                </parameters>
            </method>
            <method name="removeIndex" scope="static">
                <parameters>
                    <parameter name="table_name" usage="required" type="String"/>
                    <parameter name="index_name" usage="required" type="String"/>
                </parameters>
            </method>
        </methods>
    </class>
    <class type="ActiveRecord.ResultSet" superclass="Object">
        <methods>
            <method name="reload" scope="static">
                <description>Re-runs the query that generated the result set. This modifies the array in place and does not return a new array.</description>
            </method>
            <method name="toArray" scope="static">
                <description>Builds an array calling toObject() on each instance in the result set, thus reutrning a vanilla array of vanilla objects.</description>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="toJSON" scope="static">
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="toXML" scope="static">
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveRoutes" superclass="Object">
        <examples>
            <example>
                ActiveRoutes maps URI strings to method calls, and visa versa. It shares a similar syntax to Rails Routing, but is framework agnostic and can map calls to any type of object. Server side it can be used to map requests for a given URL to a method that will render a page, client side it can be used to provide deep linking and back button / history support for your Ajax application. Options ------- You can pass a hash of options as the third parameter to the ActiveRoutes constructor. This hash can contain the following keys: - base: default &apos;&apos;, the default path / url prefix to be used in a generated url - classSuffix: default &apos;&apos; if it was &quot;Controller&quot;, calling &quot;/blog/post/5&quot; would call BlogController.post instead of Blog.post - dispatcher: default ActiveRoutes.prototype.defaultDispatcher, the dispatcher function to be called when dispatch() is called and a route is found - camelizeObjectName: default true, if true, trying to call &quot;blog_controller&quot; through routes will call &quot;BlogController&quot; - camelizeMethodName: default true, if true, trying to call &quot;my_method_name&quot; through routes will call &quot;myMethodName&quot; - camelizeGeneratedMethods: default true, will export generated methods into the scope as &quot;articleUrl&quot; instead of &quot;article_url&quot; Declaring Routes ---------------- Wether declared in the constructor, or with addRoute(), routes can have up to three parameters, and can be declared in any of the follow ways: - &quot;name&quot;, &quot;path&quot;, { params } - &quot;path&quot;, { params } - &quot;path&quot; The path portion of a route is a URI string. Parameters that will be passed to the method called are represented with a colon. Names are optional, but the path and the params together must declare &quot;object&quot; and &quot;method&quot; parameters. The following are all valid routes: var routes = new ActiveRoutes( [ [ &apos;root&apos;,&apos;/&apos;, { object : &apos;Pages&apos;,method:&apos;index&apos;}], [ &apos;contact&apos;,&apos;/contact&apos;, { object : &apos;Pages&apos;,method:&apos;contact&apos;}], [ &apos;blog&apos;,&apos;/blog&apos;, { object : &apos;Blog&apos;,method:&apos;index&apos;}], [ &apos;post&apos;,&apos;/blog/post/:id&apos;, { object : &apos;Blog&apos;,method:&apos;post&apos;}], [ &apos;/pages/*&apos;, { object : &apos;Pages&apos;,method:&apos;page&apos;}], [ &apos;/:object/:method&apos; ] ] ,Application); Catch All Routes ---------------- If you want to route all requests below a certain path to a given method, place an asterisk in your route. When a matching path is dispatched to that route the path components will be available in an array called &quot;path&quot;. route_set.addRoute(&apos;/wiki/*&apos;, { object : &apos;WikiController&apos;,method:&apos;page&apos;}) route_set.dispatch(&apos;/wiki/a/b/c&apos;); //calls: WikiController.page( { object : &apos;WikiController&apos;,method:&apos;page&apos;,path:[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]}) Route Requirements ------------------ Each route can take a special &quot;requirements&quot; parameter that will not be passed in the params passed to the called method. Each requirement can be a regular expression or a function, which the value of the parameter will be checked against. Each value checked by a regular expression or function is always a string. route_set.addRoute(&apos;/article/:article_id/:comment_id, { article_id: /^\d+$/, comment_id: function(comment_id) { return comment_id.match(/^\d+$/); } }); Scope ----- You can specify what scope an ActiveRoutes instance will look in to call the specified objects and methods. This defaults to window but can be specified as the second parameter to the constructor. Generating URLs --------------- The method urlFor() is available on every route set, and can generate a URL from an object. Using the routes declared in the example above: routes.urlFor( { object : &apos;Blog&apos;,method:&apos;post&apos;,id:5}) == &apos;/blog/post/5&apos;; If named routes are given, corresponding methods are generated in the passed scope to resolve these urls. Application.postUrl( { id : 5}) == &apos;/blog/post/5&apos;; To get the params to generate a url, a similar method is generated: Application.postParams( { id : 5}) == {object:&apos;Blog&apos;,method:&apos;post&apos;,id:5}; To call a named route directly without round-tripping to a string and back to params use: Application.callPost( { id : 5}); Dispatching ----------- To call a given method from a URL string, use the dispatch() method. routes.dispatch(&apos;/&apos;); //will call Pages.index() routes.dispatch(&apos;/blog/post/5&apos;); //will call Blog.post( { id : 5}); History ------- Most server side JavaScript implementations will not preserve objects between requests, so the history is not of use. Client side, after each dispatch, the route and parameters are recorded. The history itself is accessible with the &quot;history&quot; property, and is traversable with the next() and back() methods.
            </example>
        </examples>
        <constructors>
            <constructor scope="instance">
                <parameters>
                    <parameter name="routes" usage="required" type="Array"/>
                    <parameter name="scope" usage="optional" type="Object">
                        <description>defaults to window</description>
                    </parameter>
                    <parameter name="options" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="ActiveRoutes"/>
                </return-types>
            </constructor>
        </constructors>
        <properties>
            <property name="defaultDispatcher" access="read-write" scope="instance" type="Function">
                <description>If no &quot;dispatcher&quot; key is passed into the options to contstruct a route set this is used. It will call scope.object_name.method_name(route.params)</description>
            </property>
            <property name="history" access="read-write" scope="instance" type="Array"/>
            <property name="logging" access="read-write" scope="static" type="Boolean"/>
        </properties>
        <methods>
            <method name="addRoute" scope="instance">
                <description>Add a new route to the route set. When adding routes via the constructor routes will be pushed onto the array, if called after the route set is initialized, the route will be unshifted onto the route set (and will have the highest priority).</description>
                <examples>
                    <example>
                        routes.addRoute(&apos;route_name&apos;,&apos;/route/path&apos;, { params } );&lt;br/&gt; routes.addRoute(&apos;/route/path&apos;, { params } );&lt;br/&gt; routes.addRoute(&apos;/route/path&apos;);
                    </example>
                </examples>
                <exceptions>
                    <exception type="ActiveRoutes.Errors.NoMethodInRoute"/>
                    <exception type="ActiveRoutes.Errors.NoObjectInRoute"/>
                    <exception type="ActiveRoutes.Errors.NoPathInRoute"/>
                </exceptions>
            </method>
            <method name="back" scope="instance">
                <description>Calls to the previous dispatched route in the history.</description>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="dispatch" scope="instance">
                <description>Will match() the given path and call the dispatcher if one is found.</description>
                <examples>
                    <example>
                        var routes = new ActiveRoutes( [ [ &apos;post&apos;,&apos;/blog/post/:id&apos;, { object : &apos;blog&apos;,method: &apos;post&apos;}]]); routes.dispatch(&apos;/blog/post/5&apos;); //by default calls Blog.post( { object : &apos;blog&apos;,method: &apos;post&apos;,id: 5});
                    </example>
                </examples>
                <parameters>
                    <parameter name="path" usage="required" type="String"/>
                </parameters>
                <exceptions>
                    <exception type="ActiveRoutes.Errors.UnresolvableUrl"/>
                </exceptions>
            </method>
            <method name="getError" scope="instance">
                <description>If match() returns false, the error it generates can be retrieved with this function.</description>
                <return-types>
                    <return-type type="mixed">
                        <description>String or null</description>
                    </return-type>
                </return-types>
            </method>
            <method name="match" scope="instance">
                <examples>
                    <example>
                        var route = routes.match(&apos;/blog/post/5&apos;);&lt;br/&gt; route == { object : &apos;blog&apos;,method: &apos;post&apos;, id: 5};
                    </example>
                </examples>
                <parameters>
                    <parameter name="path" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="mixed">
                        <description>false if no match, otherwise the matching route.</description>
                    </return-type>
                </return-types>
            </method>
            <method name="next" scope="instance">
                <description>Calls to the next dispatched route in the history if back() has already been called.</description>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="urlFor" scope="instance">
                <examples>
                    <example>
                        var routes = new ActiveRoutes( [ [ &apos;post&apos;,&apos;/blog/post/:id&apos;, { object : &apos;blog&apos;,method: &apos;post&apos;}]]);&lt;br/&gt; routes.urlFor( { object : &apos;blog&apos;,method: &apos;post&apos;, id: 5}) == &apos;/blog/post/5&apos;;
                    </example>
                </examples>
                <parameters>
                    <parameter name="params" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
                <exceptions>
                    <exception type="ActiveRoutes.Errors.NamedRouteDoesNotExistError"/>
                </exceptions>
            </method>
        </methods>
    </class>
    <class type="ActiveSupport" superclass="Object">
        <description>Provides a number of methods from the Prototype.js framework, without modifying any built in prototypes to ensure compatibility and portability.</description>
        <properties>
            <property name="logErrors" access="read-write" scope="static" type="Boolean"/>
            <property name="throwErrors" access="read-write" scope="static" type="Boolean"/>
        </properties>
        <methods>
            <method name="arrayFrom" scope="static">
                <description>Returns an array from an array or array like object.</description>
                <parameters>
                    <parameter name="object" usage="required" type="Object">
                        <description>Any iterable object (Array, NodeList, arguments)</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="bind" scope="static">
                <description>Emulates Prototype&apos;s Function.prototype.bind. Unlike Prototype&apos;s version you must explicitly use curry() to pass extra arguments to the bound function.</description>
                <parameters>
                    <parameter name="func" usage="required" type="Function"/>
                    <parameter name="object" usage="required" type="Object">
                        <description>object will be in scope as &quot;this&quot; when func is called.</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Function"/>
                </return-types>
            </method>
            <method name="camelize" scope="static">
                <description>Emulates Prototype&apos;s String.prototype.camelize</description>
                <parameters>
                    <parameter name="str" usage="required" type="String"/>
                    <parameter name="capitalize" usage="optional" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="clone" scope="static">
                <description>Emulates Prototype&apos;s Object.clone</description>
                <parameters>
                    <parameter name="object" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="createError" scope="static">
                <description>Creates an Error object (but does not throw it).</description>
                <parameters>
                    <parameter name="message" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="null"/>
                </return-types>
            </method>
            <method name="curry" scope="static">
                <description>Emulates Prototype&apos;s Function.prototype.curry.</description>
                <parameters>
                    <parameter name="func" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Function"/>
                </return-types>
            </method>
            <method name="dateFormat" scope="static">
                <description>See: http://blog.stevenlevithan.com/archives/date-time-format If convert_to_local_time is true the Date object will be assume to be GMT and be converted from GMT to the local time. Local time will be the local time of the server if running server side, or local time of the client side if running in the browser.</description>
                <examples>
                    <example>
                        ActiveSupport.dateFormat(&apos;yyyy-mm-dd HH:MM:ss&apos;);
                    </example>
                </examples>
                <parameters>
                    <parameter name="date" usage="required" type="Date"/>
                    <parameter name="format" usage="required" type="String"/>
                    <parameter name="convert_to_local_time" usage="optional" type="Boolean"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="dateFromDateTime" scope="static">
                <description>Generates a JavaScript Date object from a MySQL DATETIME formatted string (yyyy-mm-dd HH:MM:ss).</description>
                <parameters>
                    <parameter name="date_time" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Date"/>
                </return-types>
            </method>
            <method name="extend" scope="static">
                <description>Emulates Prototype&apos;s Object.extend</description>
                <parameters>
                    <parameter name="destination" usage="required" type="Object"/>
                    <parameter name="source" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="getClass" scope="static">
                <description>Returns a class if it exists. If the context (default window / global context) does not contain the class, but does have a __noSuchMethod__ property, it will attempt to call context [ class_name ] () to trigger the __noSuchMethod__ handler.</description>
                <parameters>
                    <parameter name="class_name" usage="required" type="String"/>
                    <parameter name="context" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Mixed"/>
                </return-types>
            </method>
            <method name="getGlobalContext" scope="static">
                <description>Returns the global context object (window in most implementations).</description>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="indexOf" scope="static">
                <description>Emulates Array.indexOf for implementations that do not support it.</description>
                <parameters>
                    <parameter name="array" usage="required" type="Array"/>
                    <parameter name="item" usage="required" type="mixed"/>
                </parameters>
                <return-types>
                    <return-type type="Number"/>
                </return-types>
            </method>
            <method name="isArray" scope="static">
                <parameters>
                    <parameter name="object" usage="required" type="mixed"/>
                </parameters>
                <return-types>
                    <return-type type="Boolean"/>
                </return-types>
            </method>
            <method name="JSONFromObject" scope="static">
                <description>Serializes an object to a JSON string.</description>
                <parameters>
                    <parameter name="object" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>json</description>
                    </return-type>
                </return-types>
            </method>
            <method name="keys" scope="static">
                <description>Returns an array of keys from an object.</description>
                <parameters>
                    <parameter name="object" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="log" scope="static">
                <description>Logs a message to the available logging resource. Accepts a variable number of arguments.</description>
            </method>
            <method name="proc" scope="static">
                <description>If the value passed is a function the value passed will be returned, otherwise a function returning the value passed will be returned.</description>
                <parameters>
                    <parameter name="proc" usage="required" type="mixed"/>
                </parameters>
                <return-types>
                    <return-type type="Function"/>
                </return-types>
            </method>
            <method name="synchronize" scope="static">
            </method>
            <method name="throwError" scope="static">
                <description>Accepts a variable number of arguments, that may be logged and thrown in</description>
                <parameters>
                    <parameter name="error" usage="required" type="Error"/>
                </parameters>
                <return-types>
                    <return-type type="null"/>
                </return-types>
            </method>
            <method name="underscore" scope="static">
                <description>Emulates Prototype&apos;s String.prototype.underscore</description>
                <parameters>
                    <parameter name="str" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="value" scope="static">
                <description>If the value passed is a function, the function is called and the value returned, otherwise the value passed in is returned.</description>
                <parameters>
                    <parameter name="value" usage="required" type="mixed"/>
                </parameters>
                <return-types>
                    <return-type type="scalar"/>
                </return-types>
            </method>
            <method name="without" scope="static">
                <description>Returns an array without the given item.</description>
                <parameters>
                    <parameter name="arr" usage="required" type="Array"/>
                    <parameter name="item" usage="required" type="mixed">
                        <description>to remove</description>
                    </parameter>
                </parameters>
                <return-types>
                    <return-type type="Array"/>
                </return-types>
            </method>
            <method name="wrap" scope="static">
                <description>Returns a function wrapped around the original function.</description>
                <examples>
                    <example>
                        String.prototype.capitalize = String.prototype.capitalize.wrap( function(proceed, eachWord) { if (eachWord &amp;&amp; this.include(&quot; &quot;)) { // capitalize each word in the string return this.split(&quot; &quot;).invoke(&quot;capitalize&quot;).join(&quot; &quot;); } else { // proceed using the original function return proceed(); } });
                    </example>
                </examples>
                <parameters>
                    <parameter name="func" usage="required" type="Function"/>
                    <parameter name="wrapper" usage="required" type="Function"/>
                </parameters>
                <return-types>
                    <return-type type="Function">
                        <description>wrapped</description>
                    </return-type>
                </return-types>
            </method>
            <method name="XMLFromObject" scope="static">
                <description>Serializes an object to an XML string.</description>
                <parameters>
                    <parameter name="outer_key_name" usage="required" type="String"/>
                    <parameter name="object" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String">
                        <description>xml</description>
                    </return-type>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveSupport.Inflector" superclass="Object">
        <description>A port of Rails Inflector class.</description>
        <methods>
            <method name="ordinalize" scope="static">
                <description>Generates an orginalized version of a number as a string (9th, 2nd, etc)</description>
                <parameters>
                    <parameter name="number" usage="required" type="Number"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="pluralize" scope="static">
                <description>Generates a plural version of an english word.</description>
                <parameters>
                    <parameter name="word" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
            <method name="singularize" scope="static">
                <description>Generates a singular version of an english word.</description>
                <parameters>
                    <parameter name="word" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveSupport.JSON" superclass="Object">
        <description>Provides JSON support if a native implementation is not available.</description>
        <methods>
            <method name="parse" scope="static">
                <parameters>
                    <parameter name="text" usage="required" type="String"/>
                </parameters>
                <return-types>
                    <return-type type="Object"/>
                </return-types>
            </method>
            <method name="stringify" scope="static">
                <parameters>
                    <parameter name="value" usage="required" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="String"/>
                </return-types>
            </method>
        </methods>
    </class>
    <class type="ActiveView" superclass="Object">
        <methods>
            <method name="render" scope="static">
                <description>This method is not usually called directly but is utilized by data bindings and ActiveControllers. This method is normalizes or renders a variety of inputs. Strings or Element objects are returned untouched, ActiveView instances will have their DOM container returned, ActiveView classes will be rendered and the DOM container returned. If a function is passed in it will be called with the passed scope. That function should return a string or Element.</description>
                <parameters>
                    <parameter name="content" usage="required" type="mixed"/>
                    <parameter name="scope" usage="optional" type="Object"/>
                </parameters>
                <return-types>
                    <return-type type="mixed"/>
                </return-types>
            </method>
        </methods>
    </class>
</javascript>
